{"version":3,"sources":["js/Header.js","js/Form.js","js/Helper.js","js/Resultado.js","js/Resumen.js","js/App.js","serviceWorker.js","index.js"],"names":["Header","props","Formulario","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","planRef","CotizadorSeguros","e","preventDefault","plan","current","checked","infoAuto","marca","value","year","cotizarSeguro","currentTarget","reset","className","onSubmit","this","name","ref","type","Component","obtenerDiferenciaAnio","Date","getFullYear","calcularMarca","modelo","incremento","obtenerPlan","primeraMayuscula","texto","charAt","toUpperCase","slice","Resultado","resultado","mensaje","TransitionGroup","componente","CSSTransition","classNames","key","timeout","enter","exit","Resumen","mostrarResumen","datos","App","state","console","log","incrementoPlan","parseFloat","toFixed","datosAuto","setState","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e77b8499.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = props => {\r\n    return(\r\n        <header>\r\n            <h1>Cotizador de Auto</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Formulario extends Component{\r\n    //Son para leer los campos de un formulario\r\n    marcaRef=React.createRef();\r\n    yearRef=React.createRef();\r\n    planBasicoRef=React.createRef();\r\n    planCompletoRef=React.createRef();\r\n    planRef=React.createRef();\r\n    //Sirve para que la URL no cambie con información default\r\n    CotizadorSeguros=(e)=>{\r\n        e.preventDefault();\r\n        //Forma abreviada de if else para dar valor a la variable plan a partir del plan seleccionado\r\n        const plan = this.planBasicoRef.current.checked ? 'basico' : 'completo';\r\n\r\n         //Crear el objeto\r\n        const infoAuto ={\r\n            marca:this.marcaRef.current.value,\r\n            year:this.yearRef.current.value,\r\n            plan:plan\r\n        }\r\n        //Enviar Infoauto al componente principal\r\n        this.props.cotizarSeguro(infoAuto);\r\n\r\n        //Reseter el formulario (Es opcional)\r\n        e.currentTarget.reset();\r\n    }\r\n    render(){\r\n        return(\r\n            <form className=\"cotizar-auto\" onSubmit={this.CotizadorSeguros  }>\r\n                <div className=\"campo\">\r\n                    <label>Marca</label>\r\n                    <select name=\"marca\" ref={this.marcaRef} >\r\n                        <option value=\"americano\">Americano</option>\r\n                        <option value=\"europeo\">Europeo</option>\r\n                        <option value=\"asiatico\">Asiatico</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Año</label>\r\n                    <select name=\"year\" ref={this.yearRef}>\r\n                        <option value=\"2018\">2018</option>\r\n                        <option value=\"2017\">2017</option>\r\n                        <option value=\"2016\">2016</option>\r\n                        <option value=\"2015\">2015</option>\r\n                        <option value=\"2014\">2014</option>\r\n                        <option value=\"2013\">2013</option>\r\n                        <option value=\"2012\">2012</option>\r\n                        <option value=\"2011\">2011</option>\r\n                        <option value=\"2010\">2010</option>\r\n                        <option value=\"2009\">2009</option>\r\n                        <option value=\"2008\">2008</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"campo\">\r\n                      <label>Plan:</label>\r\n                      <input type=\"radio\" ref={this.planBasicoRef}  name=\"plan\" value=\"basico\"/> Básico\r\n                      <input type=\"radio\" ref={this.planCompletoRef}  name=\"plan\" value=\"completo\"/> Completo\r\n                  </div>\r\n\r\n                <button type=\"submit\" className=\"boton\">Cotizar</button>\r\n            </form>\r\n              );\r\n       \r\n    }\r\n}\r\n\r\nexport default Formulario;","export function obtenerDiferenciaAnio(year) {\r\n   return new Date().getFullYear() - year;\r\n}\r\n\r\nexport function calcularMarca( modelo ) {\r\n    let incremento;\r\n\r\n    switch (modelo) {\r\n        case 'europeo':\r\n            incremento = 1.30;\r\n            break;\r\n        case 'americano':\r\n            incremento = 1.15;\r\n            break;\r\n        case 'asiatico':\r\n            incremento = 1.05;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return incremento;\r\n}\r\nexport function obtenerPlan( plan ) {\r\n    return (plan === 'basico') ? 1.20 : 1.50;\r\n}\r\nexport function primeraMayuscula(texto) {\r\n    return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n}","import React, { Component } from 'react';\r\nimport {TransitionGroup,CSSTransition} from 'react-transition-group';\r\n\r\nclass Resultado extends Component{\r\n    render(){\r\n        const resultado = this.props.resultado;\r\n        \r\n        const mensaje = (!resultado) ? 'Elige marca, año y tipo de seguro' : 'El total es';\r\n\r\n        return(\r\n            <div className=\"gran-total\">\r\n                {mensaje}\r\n                <TransitionGroup componente=\"span\" className=\"resultado\">\r\n                    <CSSTransition\r\n                        classNames=\"resultado\"\r\n                        key={resultado}\r\n                        timeout={{enter:700, exit:700}} \r\n                    >\r\n                        <span>{resultado}</span>\r\n                    </CSSTransition>\r\n\r\n                </TransitionGroup>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Resultado;","import React, { Component } from 'react';\r\nimport { primeraMayuscula } from './Helper';\r\nimport Resultado from './Resultado';\r\n\r\n\r\nclass Resumen extends Component{\r\n    \r\n//Creo el método mostrarResumen \r\n        mostrarResumen = () => {\r\n            const{marca,year,plan}= this.props.datos;\r\n            // Si no hay marca o no hay año o no hay plan, retornar mostrarResumen vacío\r\n            if (!marca || !year || !plan) return null;\r\n            \r\n            return(                \r\n                <div className=\"resumen\">\r\n                <h2>Resumen de Cotización</h2>\r\n                    <li>Marca: {primeraMayuscula(marca)}</li>\r\n                    <li>Plan: {primeraMayuscula(plan)}</li>\r\n                    <li>Año: {year}</li>\r\n                </div>  \r\n            )\r\n        }\r\n        \r\n        render(){\r\n        \r\n        return(\r\n            <div>\r\n                { this.mostrarResumen()}\r\n                <Resultado \r\n                    resultado={this.props.resultado}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Resumen; ","import React, { Component } from 'react'\r\nimport Header from './Header'\r\nimport Formulario from './Form'\r\nimport {obtenerDiferenciaAnio, calcularMarca, obtenerPlan} from './Helper'\r\nimport Resumen from './Resumen'\r\nclass App extends Component {\r\n //Creo un State Vacio\r\n  state ={\r\n    resultado : '',\r\n    datos:{}\r\n  }\r\n  //Creo un método cotizarSeguro\r\n\r\n  cotizarSeguro = (datos) =>{\r\n      console.log(datos);\r\n      //Creo tres variables a partir de datos\r\n      const {marca, plan, year } = datos;\r\n\r\n      //Lógica para el cálculo del valor del seguro\r\n      //Base de 200000\r\n      let resultado = 200000;\r\n      //Obtener la diferencia de años y por cada año restar el 4%\r\n      const diferencia = obtenerDiferenciaAnio(year);\r\n      resultado -= ((diferencia * 3) * resultado) / 100;\r\n      //Incrementos por país de procedencia Americano 15% Asiatico 5% Europeo 30%\r\n      resultado = calcularMarca(marca) * resultado;\r\n      //Planes: El básico incrementa el valor 20% y el completo 50%\r\n      let incrementoPlan = obtenerPlan(plan);\r\n      //Le quito los decimales con la función parsefloat\r\n      resultado = parseFloat(incrementoPlan * resultado).toFixed(0);\r\n      \r\n\r\n      //Creo objeto para el resumen\r\n      const datosAuto = {\r\n        marca: marca,\r\n        plan: plan,\r\n        year: year\r\n      }\r\n\r\n      //Lleno el State con el resultado\r\n      this.setState({\r\n        resultado : resultado,\r\n        datos: datosAuto\r\n      })\r\n\r\n  }\r\n\r\n\r\nrender(){\r\n  return(\r\n    <div className=\"contenedor\">\r\n      <Header />\r\n      <Formulario\r\n      cotizarSeguro={this.cotizarSeguro}\r\n      />\r\n      \r\n      <Resumen\r\n      //Paso el state por medio props al componente Resumen\r\n      datos={this.state.datos}\r\n      resultado={this.state.resultado}\r\n      />\r\n    </div>    \r\n  )\r\n}\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './js/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}